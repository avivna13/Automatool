import json
import argparse
import os
from typing import Dict, Any, List

def parse_mobsf_report_for_llm(file_path: str, output:str) -> Dict[str, Any]:
    """
    Parses a MobSF JSON static analysis report to extract fields relevant for an LLM.

    This function reads a JSON file generated by MobSF and filters its content
    to keep only the most valuable information for security research, such as
    security findings and API usage.

    Args:
        file_path: The full path to the MobSF JSON report file.

    Returns:
        A dictionary containing the curated, relevant information from the report.
        Returns an empty dictionary if the file cannot be found or parsed.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: The file was not found at {file_path}")
        return {}
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from the file at {file_path}")
        return {}

    # This dictionary will hold the curated data for the LLM.
    parsed_data: Dict[str, Any] = {}

    # --- 1. Core Application Identifiers ---
    # Basic context about the application.
    app_info_keys = ['app_name', 'package_name', 'main_activity']
    parsed_data['app_info'] = {key: data.get(key) for key in app_info_keys}

    # --- 2. Critical Security Findings ---
    # These are the highest priority sections for security research.
    parsed_data['security_findings'] = {
        'code_analysis': data.get('code_analysis', {}).get('findings', {}),
        'manifest_analysis': data.get('manifest_analysis', {}).get('manifest_findings', []),
        'certificate_analysis': data.get('certificate_analysis', {}).get('certificate_findings', []),
        'secrets': data.get('secrets', [])
    }

    # --- 3. Android API Usage ---
    # Maps specific API calls to the files that use them.
    parsed_data['android_api_usage'] = data.get('android_api', {})
    if parsed_data:
        # Create the output directory if it doesn't exist
        os.makedirs(output, exist_ok=True)
        
        # Construct the full output path with the new filename
        output_filename = "parsed_mobsf_analysis.json"
        output_path = os.path.join(output, output_filename)
        
        # Write the parsed data to the new file
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(parsed_data, f, indent=2)
        
        print(f"Successfully parsed '{output_filename}' and saved the output to '{output_path}'")
    
    return parsed_data

# --- Main execution block ---
if __name__ == '__main__':
    # Set up the command-line argument parser
    parser = argparse.ArgumentParser(
        description="Parse a MobSF JSON report and save the key information to a new file."
    )
    parser.add_argument(
        "-f", 
        "--file", 
        type=str, 
        required=True, 
        help="Path to the input MobSF JSON report file."
    )
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        required=True,
        help="Path to the output directory where the parsed JSON file will be stored."
    )
    
    args = parser.parse_args()
    
    # Call the parsing function with the file path from the command line
    relevant_data = parse_mobsf_report_for_llm(args.file,args.output)
