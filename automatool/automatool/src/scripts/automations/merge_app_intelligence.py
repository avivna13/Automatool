#!/usr/bin/env python3
"""
Merged App Intelligence Automation

This module combines SensorTower app metadata with Google Play reviews data 
to generate a comprehensive app intelligence report.

Author: Generated for Aviv Automatool
"""

import os
import sys
from datetime import datetime
from typing import Optional

# Add current directory to Python path for imports to work
current_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(current_dir, '..', '..')
sys.path.insert(0, src_dir)

# Import existing automation modules
from scripts.automations.sensor_scraper import fetch_app_data, parse_to_text, generate_google_play_url
from play_app_metadata_scraper import PlayStoreBasicInfoScraper


def merge_app_intelligence(package_name: str, output_directory: str, verbose: bool = False) -> Optional[str]:
    """
    Generate comprehensive app intelligence report with Google Play Store and SensorTower metadata.
    
    Args:
        package_name (str): Android package name to analyze
        output_directory (str): Directory for output files
        verbose (bool): Enable verbose logging
        
    Returns:
        str: Path to generated report file, or None if failed
        
    Raises:
        No exceptions raised - function handles all errors gracefully
    """
    if verbose:
        print(f"[DEBUG] Starting app intelligence report generation for: {package_name}")
        print(f"[DEBUG] Output directory: {output_directory}")
    
    # Initialize data containers
    sensor_text = None
    play_store_text = None
    
    # Fetch Google Play Store metadata
    try:
        if verbose:
            print("[DEBUG] Fetching Google Play Store metadata...")
        
        scraper = PlayStoreBasicInfoScraper(verbose=verbose)
        play_store_info = scraper.get_app_basic_info(package_name)
        
        if play_store_info:
            play_store_text = scraper.print_basic_info(play_store_info)
            if verbose:
                print("[DEBUG] ✅ Google Play Store metadata retrieved successfully")
        else:
            if verbose:
                print("[DEBUG] ❌ Google Play Store metadata retrieval failed")
                
    except Exception as e:
        if verbose:
            print(f"[DEBUG] ❌ Google Play Store error: {e}")
    
    # Fetch SensorTower data
    try:
        if verbose:
            print("[DEBUG] Fetching SensorTower app data...")
        
        sensor_data = fetch_app_data(package_name)
        if sensor_data:
            app_id = sensor_data.get('app_id', '')
            country = sensor_data.get('country', 'US') 
            google_play_url = generate_google_play_url(app_id, country)
            sensor_text = parse_to_text(sensor_data, google_play_url)
            
            if verbose:
                print("[DEBUG] ✅ SensorTower data retrieved successfully")
        else:
            if verbose:
                print("[DEBUG] ❌ SensorTower data retrieval failed")
                
    except Exception as e:
        if verbose:
            print(f"[DEBUG] ❌ SensorTower error: {e}")
    
    # Skip reviews data - not needed in output
    
    # Create unified report structure
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    report_sections = [
        "=" * 47,
        " " * 10 + "APP INTELLIGENCE REPORT" + " " * 10,
        "=" * 47,
        f"Package: {package_name}",
        f"Generated: {timestamp}",
        "=" * 47,
        "",
        "[GOOGLE PLAY STORE METADATA]",
        play_store_text if play_store_text else "❌ Google Play Store metadata unavailable - package not found or API error",
        "",
        "=" * 47,
        "",
        "[SENSOR TOWER APP METADATA]",
        sensor_text if sensor_text else "❌ SensorTower data unavailable - API may be down or package not found",
        "",
        "=" * 47,
        "Report generated by Aviv Automatool"
    ]

    merged_report = "\n".join(report_sections)
    
    # Generate output file path
    output_file = os.path.join(output_directory, "app_intelligence_report.txt")
    
    if verbose:
        print(f"[DEBUG] Writing report to: {output_file}")
        print(f"[DEBUG] Report length: {len(merged_report)} characters")

    try:
        # Ensure output directory exists
        os.makedirs(output_directory, exist_ok=True)
        
        # Write the merged report
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(merged_report)
        
        print(f"✅ App intelligence report saved: {output_file}")
        
        if verbose:
            print(f"[DEBUG] ✅ Report successfully written to disk")
            
        return output_file
        
    except PermissionError:
        error_msg = f"❌ ERROR: Permission denied writing to: {output_file}"
        print(error_msg)
        return None
        
    except Exception as e:
        error_msg = f"❌ ERROR: Failed to save report: {e}"
        print(error_msg)
        if verbose:
            print(f"[DEBUG] Exception details: {type(e).__name__}: {e}")
        return None


if __name__ == "__main__":
    # Simple test functionality - can now be run from any directory
    if len(sys.argv) < 3:
        print("Usage: python merge_app_intelligence.py <package_name> <output_directory> [--verbose]")
        print("Example: python merge_app_intelligence.py com.whatsapp C:\\temp --verbose")
        sys.exit(1)
    
    package_name = sys.argv[1]
    output_directory = sys.argv[2]
    verbose = "--verbose" in sys.argv
    
    print(f"Testing merge_app_intelligence with: {package_name}")
    print(f"Output directory: {output_directory}")
    
    result = merge_app_intelligence(package_name, output_directory, verbose)
    
    if result:
        print(f"✅ Test successful: {result}")
    else:
        print("❌ Test failed")
        sys.exit(1)
